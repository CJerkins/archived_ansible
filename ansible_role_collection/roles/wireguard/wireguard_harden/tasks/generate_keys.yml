#The server keys will be 0.private and 0.public. The client keys will start from 1 onwards.
#Note the number of clients is declared in "defaults/main.yml".

# This is how we avoid generating new keys every time this is run.
# To force re-generating everything, before running the
# playbook go on the server and do
#     wg-quick down {{ vpn_interface }} && rm /etc/wireguard/{{ vpn_interface }}.conf 
# (simply removing {{ vpn_interface }}.conf without previously shutting down the service
# will make it impossible to shut down the service in an orderly fashion!
# You will have to manually re-create a {{ vpn_interface }}.conf file before it will exit.)
- name: "Check if {{ vpn_interface }}-server.conf already exists"
  stat:
    path: /etc/wireguard/{{ vpn_interface }}.conf
  register: interface_conf

- name: Install
  block: 

  - name: Generate private and public keys for the client and server
    shell: umask 077; wg genkey | tee {{ item }}.private | wg pubkey > {{ item }}.public
    register: key_files
    with_sequence: start=0 end={{ clients }}
    # when: interface_conf is not defined or interface_conf.stat.exists == false

  - name: Register private key file contents
    shell: cat {{ item }}.private
    register: private_key_files
    with_sequence: start=0 end={{ clients }}
    when: "{{ vpn_interface }}_conf is not defined or {{ vpn_interface }}_conf.stat.exists == false"

  - name: Register public key file contents
    shell: cat {{ item }}.public
    register: public_key_files
    with_sequence: start=0 end={{ clients }}
    # when: "{{ vpn_interface }}_conf is not defined or {{ vpn_interface }}_conf.stat.exists == false"

  # Client configs are traditionally named {{ vpn_interface }}-client.conf, this lets
  # us keep that scheme.
  - name: Generate directories for client configs
    file:
      path: "~/wg_clients/client_{{ item }}"
      state: directory
      owner: root
      group: root
      mode: 0600
    with_sequence: start=1 end={{ clients }}
    # when: "{{ vpn_interface }}_conf is not defined or {{ vpn_interface }}_conf.stat.exists == false"
        
  - name: Generate client configs
    template:
      src: "templates/client.conf"
      dest: "~/wg_clients/client_{{ item }}/{{ vpn_interface }}-client.conf"
      owner: root
      group: root
      mode: 0600
    with_sequence: start=1 end={{ clients }}
    # when: "{{ vpn_interface }}_conf is not defined or {{ vpn_interface }}_conf.stat.exists == false"
    
    
  # Else an already-running service will overwrite the local
  # config we are about to create when it quits
  - name: Stop any running Wireguard service
    systemd:
      name: wg-quick@{{ vpn_interface }}.service
      state: stopped
    # when: "{{ vpn_interface }}_conf is not defined or {{ vpn_interface }}_conf.stat.exists == false"


  # Sometimes systemd doesn't do the job
  - name: Stop any running Wireguard service directly
    shell: "wg-quick down {{ vpn_interface }} || true"  # ignore failures
    register: wg_quick_down_out  # For debugging
    # when: "{{ vpn_interface }}_conf is not defined or {{ vpn_interface }}_conf.stat.exists == false"

  # Should happen last among the config file creations, so if the process 
  # is interrupted we will re-generate everything (the existence of the 
  # server config is used to determine whether to generate the server and 
  # client config files)
  - name: Generate server config
    template:
      src: "templates/server.conf.j2"
      dest: "/etc/wireguard/{{ vpn_interface }}.conf"
      owner: root
      group: root
      mode: 0600
    # when: "{{ vpn_interface }}_conf.stat is not defined or {{ vpn_interface }}_conf.stat.exists == false"

  - name: Print server public key
    debug:
      var: public_key_files.results[0].stdout
  
  when: interface_conf.stat is not defined or interface_conf.stat.exists == false

- name: Enable wireguard interface
  systemd:
    name: "wg-quick@{{ vpn_interface }}"
    enabled: yes
    state: started
  # when is omitted since state should be `started` regardless

- name: Register the clients on the vpn server
  shell: wg set {{ vpn_interface }} peer {{ public_key_files.results[item|int].stdout }} allowed-ips {{ vpn_server_network }}.{{item|int + 1}}/32
  with_sequence: start=1 end={{ clients }}
  when: interface_conf is not defined or interface_conf.stat.exists == false

- name: Restart the VPN service to save changes
  systemd:
    name: wg-quick@{{ vpn_interface }}.service
    state: restarted
  when: interface_conf is not defined or interface_conf.stat.exists == false
